import streamlit as st
import pandas as pd
import sqlite3
from datetime import datetime

# ---------------------- Database ----------------------
DB_PATH = "questions.db"
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
c = conn.cursor()

# ---------------------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ----------------------
def get_all_messages():
    c.execute("SELECT id, user_message, answer, timestamp FROM user_messages ORDER BY id DESC")
    return c.fetchall()

def get_all_chunks():
    c.execute("""
        SELECT rc.id, rc.user_message_id, um.user_message, rc.chunk_text, rc.source, rc.page_number
        FROM retrieved_chunks rc
        LEFT JOIN user_messages um ON rc.user_message_id = um.id
        ORDER BY rc.id DESC
    """)
    return c.fetchall()

def get_latest_metrics(limit=50):
    c.execute("""
        SELECT m.id, m.user_message_id, um.user_message, m.prompt_tokens, m.response_tokens, m.response_time, m.timestamp
        FROM llm_metrics m
        LEFT JOIN user_messages um ON m.user_message_id = um.id
        ORDER BY m.id DESC
        LIMIT ?
    """, (limit,))
    return c.fetchall()

def get_all_feedback():
    c.execute("""
        SELECT f.id, f.user_message_id, um.user_message, f.satisfaction, f.feedback_text, f.timestamp
        FROM feedback f
        LEFT JOIN user_messages um ON f.user_message_id = um.id
        ORDER BY f.id DESC
    """)
    return c.fetchall()

# ---------------------- Streamlit Page Config ----------------------
st.set_page_config(
    page_title="Admin Dashboard - RAG Chatbot", 
    page_icon="üîê", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# ---------------------- Custom CSS ----------------------
st.markdown("""
    <style>
    .main {
        padding: 1rem;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 1rem;
        color: white;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        margin-bottom: 1rem;
    }
    .metric-value {
        font-size: 2.5rem;
        font-weight: bold;
        margin: 0.5rem 0;
    }
    .metric-label {
        font-size: 1rem;
        opacity: 0.9;
    }
    .metric-delta {
        font-size: 0.9rem;
        margin-top: 0.5rem;
    }
    h1 {
        color: #1f2937;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }
    h2, h3 {
        color: #374151;
        margin-top: 1.5rem;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 2rem;
    }
    .stTabs [data-baseweb="tab"] {
        padding: 1rem 2rem;
        font-weight: 600;
    }
    .feedback-card {
        background: #f9fafb;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #3b82f6;
        margin: 0.5rem 0;
    }
    .stats-box {
        background: #f0f9ff;
        padding: 1rem;
        border-radius: 0.5rem;
        text-align: center;
    }
    </style>
""", unsafe_allow_html=True)

# ---------------------- Header ----------------------
col_header1, col_header2 = st.columns([3, 1])
with col_header1:
    st.title("üîê ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà - RAG Chatbot Dashboard")
    st.markdown("**‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Chatbot ‡πÅ‡∏ö‡∏ö Real-time**")
with col_header2:
    st.markdown(f"### üìÖ {datetime.now().strftime('%d/%m/%Y')}")
    st.markdown(f"üïê {datetime.now().strftime('%H:%M:%S')}")

st.divider()

# ---------------------- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ----------------------
messages_data = get_all_messages()
df_messages = pd.DataFrame(messages_data, columns=["ID", "User Message", "Answer", "Timestamp"])
if not df_messages.empty:
    df_messages["Timestamp"] = pd.to_datetime(df_messages["Timestamp"])

chunks_data = get_all_chunks()
df_chunks = pd.DataFrame(chunks_data, columns=["ID", "User Message ID", "User Message", "Chunk Text", "Source", "Page Number"])

metrics_data = get_latest_metrics(limit=50)
df_metrics = pd.DataFrame(metrics_data, columns=["ID", "User Message ID", "User Message", "Prompt Tokens", "Response Tokens", "Response Time (s)", "Timestamp"])
if not df_metrics.empty:
    df_metrics["Timestamp"] = pd.to_datetime(df_metrics["Timestamp"])

feedback_data = get_all_feedback()
df_feedback = pd.DataFrame(feedback_data, columns=["ID", "User Message ID", "User Message", "Satisfaction", "Feedback Text", "Timestamp"])
if not df_feedback.empty:
    df_feedback["Timestamp"] = pd.to_datetime(df_feedback["Timestamp"])

# ---------------------- KPI Dashboard ----------------------
st.subheader("üìä Key Performance Indicators")

col1, col2, col3, col4 = st.columns(4)

with col1:
    total_messages = len(df_messages)
    st.markdown(f"""
    <div class="metric-card" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
        <div class="metric-label">üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
        <div class="metric-value">{total_messages}</div>
        <div class="metric-delta">+{total_messages} ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°</div>
    </div>
    """, unsafe_allow_html=True)

with col2:
    feedback_count = len(df_feedback)
    satisfaction_rate = round(df_feedback[df_feedback["Satisfaction"] == "‡∏û‡∏≠‡πÉ‡∏à"].shape[0] / feedback_count * 100, 1) if feedback_count > 0 else 0
    st.markdown(f"""
    <div class="metric-card" style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);">
        <div class="metric-label">‚≠ê Feedback</div>
        <div class="metric-value">{feedback_count}</div>
        <div class="metric-delta">{satisfaction_rate}% ‡∏û‡∏≠‡πÉ‡∏à</div>
    </div>
    """, unsafe_allow_html=True)

with col3:
    avg_response_time = round(df_metrics["Response Time (s)"].mean(), 2) if not df_metrics.empty else 0
    st.markdown(f"""
    <div class="metric-card" style="background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);">
        <div class="metric-label">‚ö° Avg Response Time</div>
        <div class="metric-value">{avg_response_time}s</div>
        <div class="metric-delta">{'‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°' if avg_response_time < 2 else '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'}</div>
    </div>
    """, unsafe_allow_html=True)

with col4:
    total_tokens = df_metrics["Prompt Tokens"].sum() + df_metrics["Response Tokens"].sum() if not df_metrics.empty else 0
    st.markdown(f"""
    <div class="metric-card" style="background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);">
        <div class="metric-label">üéØ Total Tokens Used</div>
        <div class="metric-value">{total_tokens:,}</div>
        <div class="metric-delta">{df_metrics.shape[0]} requests</div>
    </div>
    """, unsafe_allow_html=True)

st.divider()

# ---------------------- Quick Stats Section ----------------------
if not df_metrics.empty:
    st.subheader("üìà Quick Statistics")
    
    stat_col1, stat_col2, stat_col3, stat_col4 = st.columns(4)
    
    with stat_col1:
        st.markdown("""
        <div class="stats-box">
            <h4 style="margin:0; color:#3b82f6;">Avg Prompt Tokens</h4>
            <h2 style="margin:0.5rem 0;">{}</h2>
        </div>
        """.format(f"{df_metrics['Prompt Tokens'].mean():.0f}"), unsafe_allow_html=True)
    
    with stat_col2:
        st.markdown("""
        <div class="stats-box">
            <h4 style="margin:0; color:#8b5cf6;">Avg Response Tokens</h4>
            <h2 style="margin:0.5rem 0;">{}</h2>
        </div>
        """.format(f"{df_metrics['Response Tokens'].mean():.0f}"), unsafe_allow_html=True)
    
    with stat_col3:
        st.markdown("""
        <div class="stats-box">
            <h4 style="margin:0; color:#ec4899;">Max Response Time</h4>
            <h2 style="margin:0.5rem 0;">{}</h2>
        </div>
        """.format(f"{df_metrics['Response Time (s)'].max():.2f}s"), unsafe_allow_html=True)
    
    with stat_col4:
        st.markdown("""
        <div class="stats-box">
            <h4 style="margin:0; color:#10b981;">Min Response Time</h4>
            <h2 style="margin:0.5rem 0;">{}</h2>
        </div>
        """.format(f"{df_metrics['Response Time (s)'].min():.2f}s"), unsafe_allow_html=True)
    
    st.divider()

# ---------------------- ‚≠ê‚≠ê‚≠ê START: NEW SECTION ‚≠ê‚≠ê‚≠ê ----------------------
# ---------------------- Top Questions Analysis ----------------------
st.subheader("üí° ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (Top 10)")

if not df_messages.empty:
    # --- START: TEXT NORMALIZATION ---
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á DataFrame ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô
    analysis_df = df_messages.copy()

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    def normalize_text(text):
        if not isinstance(text, str):
            return ""
        text = text.lower() # 1. ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å
        text = text.strip() # 2. ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤-‡∏´‡∏•‡∏±‡∏á
        
        # 3. ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        words_to_remove = ['‡∏Ñ‡∏∞', '‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏Ñ‡πà‡∏∞', '‡∏Ñ‡∏±‡∏ö', '‡∏à‡πâ‡∏∞', '‡∏à‡πâ‡∏≤', '?', '!', '.']
        for word in words_to_remove:
            text = text.replace(word, '')
            
        return text.strip() # ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏Ñ‡∏≥

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß
    analysis_df['Normalized Message'] = analysis_df['User Message'].apply(normalize_text)

    # --- END: TEXT NORMALIZATION ---

    # 1. ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß
    top_questions_df = analysis_df['Normalized Message'].value_counts().reset_index()
    top_questions_df.columns = ['Question', 'Count']
    
    # 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    top_10_questions = top_questions_df.head(10)

    # ... ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î (st.columns, st.bar_chart, st.dataframe) ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ...
    col_chart, col_table = st.columns([2, 3]) 

    with col_chart:
        st.markdown("##### ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
        chart_data = top_10_questions.set_index('Question')
        st.bar_chart(chart_data)

    with col_table:
        st.markdown("##### ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        st.dataframe(
            top_10_questions,
            use_container_width=True,
            hide_index=True,
            column_config={
                "Question": st.column_config.TextColumn("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", width="large"),
                "Count": st.column_config.NumberColumn("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á", width="small")
            }
        )
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢")

st.divider()

# ---------------------- ‚≠ê‚≠ê‚≠ê END: NEW SECTION ‚≠ê‚≠ê‚≠ê ----------------------


# ---------------------- Tabs for Data Tables ----------------------
tab1, tab2, tab3, tab4 = st.tabs(["üí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "üìÇ Retrieved Chunks", "üìä LLM Metrics", "‚≠ê Feedback"])

with tab1:
    st.markdown("### üìã ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    if not df_messages.empty:
        # Search/Filter
        search_term = st.text_input("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...")
        if search_term:
            filtered_df = df_messages[df_messages["User Message"].str.contains(search_term, case=False, na=False)]
        else:
            filtered_df = df_messages
        
        st.dataframe(
            filtered_df,
            use_container_width=True,
            height=400,
            column_config={
                "ID": st.column_config.NumberColumn("ID", width="small"),
                "Timestamp": st.column_config.DatetimeColumn("‡πÄ‡∏ß‡∏•‡∏≤", format="DD/MM/YYYY HH:mm"),
                "User Message": st.column_config.TextColumn("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", width="medium"),
                "Answer": st.column_config.TextColumn("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", width="large")
            }
        )
        st.info(f"‡πÅ‡∏™‡∏î‡∏á {len(filtered_df)} ‡∏à‡∏≤‡∏Å {len(df_messages)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°")

with tab2:
    st.markdown("### üìÇ Chunks ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    if not df_chunks.empty:
        st.dataframe(
            df_chunks,
            use_container_width=True,
            height=400,
            column_config={
                "ID": st.column_config.NumberColumn("ID", width="small"),
                "Page Number": st.column_config.NumberColumn("‡∏´‡∏ô‡πâ‡∏≤", width="small"),
                "Source": st.column_config.TextColumn("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤", width="medium"),
                "Chunk Text": st.column_config.TextColumn("‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤", width="large")
            }
        )
        st.info(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Chunks ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(df_chunks)}")
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Chunks")

with tab3:
    st.markdown("### üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Performance ‡∏Ç‡∏≠‡∏á LLM (50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)")
    if not df_metrics.empty:
        st.dataframe(
            df_metrics,
            use_container_width=True,
            height=400,
            column_config={
                "ID": st.column_config.NumberColumn("ID", width="small"),
                "Timestamp": st.column_config.DatetimeColumn("‡πÄ‡∏ß‡∏•‡∏≤", format="DD/MM/YYYY HH:mm"),
                "Prompt Tokens": st.column_config.NumberColumn("Prompt Tokens", width="small"),
                "Response Tokens": st.column_config.NumberColumn("Response Tokens", width="small"),
                "Response Time (s)": st.column_config.NumberColumn("Response Time", format="%.2f s", width="small")
            }
        )
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Metrics")

with tab4:
    st.markdown("### üí¨ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    if not df_feedback.empty:
        # <<< CHANGED >>> ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô st.radio ‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà
        filter_option = st.radio(
            "‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:", 
            ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å üëç", "‡∏û‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ", "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡πà‡∏ß‡∏¢ üëé"], 
            horizontal=True
        )
        
        # <<< CHANGED >>> ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£ filter ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà
        if filter_option == "‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å üëç":
            display_feedback = df_feedback[df_feedback["Satisfaction"] == "‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å üëç"]
        elif filter_option == "‡∏û‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ":
            display_feedback = df_feedback[df_feedback["Satisfaction"] == "‡∏û‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ"]
        elif filter_option == "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡πà‡∏ß‡∏¢ üëé":
            display_feedback = df_feedback[df_feedback["Satisfaction"] == "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡πà‡∏ß‡∏¢ üëé"]
        else: # "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
            display_feedback = df_feedback
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á st.dataframe ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        st.dataframe(
            display_feedback,
            use_container_width=True,
            height=300,
            column_config={
                "ID": st.column_config.NumberColumn("ID", width="small"),
                "Timestamp": st.column_config.DatetimeColumn("‡πÄ‡∏ß‡∏•‡∏≤", format="DD/MM/YYYY HH:mm"),
                "Satisfaction": st.column_config.TextColumn("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à", width="small"),
                "Feedback Text": st.column_config.TextColumn("‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞", width="large")
            }
        )
        
        st.markdown("---")
        st.markdown("#### üåü Feedback ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")

        # <<< CHANGED >>> ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary ‡πÄ‡∏û‡∏∑‡πà‡∏≠ map ‡∏Ñ‡πà‡∏≤ satisfaction ‡∏Å‡∏±‡∏ö emoji
        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
        emoji_map = {
            "‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å üëç": "üëç",
            "‡∏û‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏î‡πâ": "üëå",
            "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡πà‡∏ß‡∏¢ üëé": "üëé"
        }

        for idx, row in display_feedback.head(5).iterrows():
            # ‡πÉ‡∏ä‡πâ .get() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á emoji ‡∏à‡∏≤‡∏Å map, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡πá‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default "üí¨"
            emoji = emoji_map.get(row["Satisfaction"], "üí¨")
            
            with st.expander(f"{emoji} {row['User Message'][:60]}... - {row['Timestamp'].strftime('%d/%m/%Y %H:%M')}"):
                st.write(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à:** {row['Satisfaction']}")
                if pd.notna(row['Feedback Text']) and row['Feedback Text']:
                    st.write(f"**‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞:** {row['Feedback Text']}")
                else:
                    st.write("_‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°_")
    else:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏µ‡∏î‡πÅ‡∏ö‡∏Ñ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

# ---------------------- Footer ----------------------
st.divider()
st.markdown("""
    <div style='text-align: center; color: #6b7280; padding: 1rem;'>
        <p>üîê RAG Chatbot Admin Dashboard | Powered by Streamlit | Last Updated: {}</p>
    </div>
""".format(datetime.now().strftime('%H:%M:%S')), unsafe_allow_html=True)