import streamlit as st
import sqlite3
import pandas as pd
import bcrypt
from datetime import datetime

# --- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ---
user_conn = sqlite3.connect('secure_users.db', check_same_thread=False)
user_c = user_conn.cursor()

# --- ‡∏™‡∏£‡πâ‡∏≤‡∏á table users ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ---
user_c.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE NOT NULL,
    password BLOB NOT NULL
)
''')
user_conn.commit()

# --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå role ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ---
user_c.execute("PRAGMA table_info(users)")
columns = [col[1] for col in user_c.fetchall()]
if 'role' not in columns:
    user_c.execute("ALTER TABLE users ADD COLUMN role TEXT DEFAULT 'user'")
    user_conn.commit()
    print("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'role' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ---
def add_user(username, plain_password, role='user'):
    hashed_pw = bcrypt.hashpw(plain_password.encode('utf-8'), bcrypt.gensalt())
    try:
        user_c.execute(
            "INSERT INTO users (username, password, role) VALUES (?, ?, ?)",
            (username, hashed_pw, role)
        )
        user_conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ---
def verify_user(username, password):
    user_c.execute("SELECT password, role FROM users WHERE username = ?", (username,))
    result = user_c.fetchone()
    if result:
        hashed_pw_db, role = result
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô verify
        if isinstance(hashed_pw_db, str):
            hashed_pw = hashed_pw_db.encode('utf-8')
        else:
            hashed_pw = hashed_pw_db  # ‡πÄ‡∏õ‡πá‡∏ô bytes ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        if bcrypt.checkpw(password.encode('utf-8'), hashed_pw):
            return True, role
    return False, None

# --- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ---
qa_conn = sqlite3.connect('questions.db', check_same_thread=False)
qa_c = qa_conn.cursor()
qa_c.execute('''
CREATE TABLE IF NOT EXISTS questions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    question TEXT NOT NULL,
    answer TEXT NOT NULL,
    timestamp TEXT NOT NULL,
    correct_answer TEXT
)
''')
qa_conn.commit()

def get_all_questions():
    qa_c.execute("SELECT id, question, answer, timestamp, correct_answer FROM questions")
    return qa_c.fetchall()

# --- Streamlit Page Config ---
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà", page_icon="üîê", layout="wide")
st.title("üîê ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà")

# --- Session State ---
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'username' not in st.session_state:
    st.session_state.username = ""
if 'role' not in st.session_state:
    st.session_state.role = "user"

# --- Login ---
if not st.session_state.logged_in:
    st.subheader("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
    username = st.text_input("Username")
    password = st.text_input("Password", type="password")
    if st.button("Login"):
        valid, role = verify_user(username, password)
        if valid:
            st.session_state.logged_in = True
            st.session_state.username = username
            st.session_state.role = role
            st.success(f"‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö {username} ({role})")
            st.rerun()
        else:
            st.error("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

# --- Logged in ---
else:
    st.sidebar.success(f"üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {st.session_state.username} ({st.session_state.role})")
    if st.sidebar.button("Logout"):
        st.session_state.logged_in = False
        st.session_state.username = ""
        st.session_state.role = "user"
        st.rerun()

    # --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ---
    data = get_all_questions()
    df = pd.DataFrame(data, columns=["id", "question", "answer", "timestamp", "correct_answer"])

    st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    if df.empty:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
    else:
        st.dataframe(df, use_container_width=True, height=600)

    # --- ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin ---
    if st.session_state.role == "admin":
        st.markdown("---")
        st.subheader("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà")
        new_question = st.text_area("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
        new_answer = st.text_area("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö")
        if st.button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"):
            if new_question and new_answer:
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                qa_c.execute(
                    "INSERT INTO questions (question, answer, timestamp) VALUES (?, ?, ?)",
                    (new_question, new_answer, timestamp)
                )
                qa_conn.commit()
                st.success("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                st.rerun()
            else:
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô")

        st.markdown("---")
        st.subheader("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°/‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö/‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        selected_id = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", df["id"])
        current_question = df.loc[df["id"] == selected_id, "question"].values[0]
        current_answer = df.loc[df["id"] == selected_id, "answer"].values[0]
        current_correct = df.loc[df["id"] == selected_id, "correct_answer"].values[0]

        edit_question = st.text_area("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°", value=current_question)
        edit_answer = st.text_area("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", value=current_answer)
        edit_correct = st.text_area("‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", value=current_correct if current_correct else "")

        if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"):
            qa_c.execute(
                "UPDATE questions SET question=?, answer=?, correct_answer=? WHERE id=?",
                (edit_question, edit_answer, edit_correct, selected_id)
            )
            qa_conn.commit()
            st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ID {selected_id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            st.rerun()

        st.markdown("---")
        st.subheader("üóëÔ∏è ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
        delete_id = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö", df["id"], key="delete_id")
        if st.button("‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"):
            qa_c.execute("DELETE FROM questions WHERE id=?", (delete_id,))
            qa_conn.commit()
            st.success(f"‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ID {delete_id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            st.rerun()
