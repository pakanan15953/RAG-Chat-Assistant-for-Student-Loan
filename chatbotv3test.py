import os
import torch
import streamlit as st
import logging
import sqlite3
import re
from datetime import datetime
from langchain_community.document_loaders import PyMuPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import Chroma
from ollama import chat

# ---------------------- Logging Setup ----------------------
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ---------------------- Database Setup ----------------------
def init_db():
    conn = sqlite3.connect("questions.db")
    cursor = conn.cursor()
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            question TEXT NOT NULL,
            answer TEXT NOT NULL,
            timestamp TEXT NOT NULL
        )
    """)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    cursor.execute("PRAGMA table_info(questions)")
    columns = [column[1] for column in cursor.fetchall()]
    
    if 'citations' not in columns:
        cursor.execute("ALTER TABLE questions ADD COLUMN citations TEXT DEFAULT ''")
        logging.info("‚úÖ Added 'citations' column to database")
    
    if 'confidence_score' not in columns:
        cursor.execute("ALTER TABLE questions ADD COLUMN confidence_score REAL DEFAULT 0.0")
        logging.info("‚úÖ Added 'confidence_score' column to database")
    
    conn.commit()
    conn.close()
    logging.info("üì¶ Database initialized successfully.")

def save_question_to_db(question, answer, citations="", confidence_score=0.0):
    conn = sqlite3.connect("questions.db")
    cursor = conn.cursor()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå citations ‡πÅ‡∏•‡∏∞ confidence_score ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    cursor.execute("PRAGMA table_info(questions)")
    columns = [column[1] for column in cursor.fetchall()]
    
    if 'citations' in columns and 'confidence_score' in columns:
        # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
        cursor.execute("""
            INSERT INTO questions (question, answer, citations, confidence_score, timestamp)
            VALUES (?, ?, ?, ?, ?)
        """, (question, answer, citations, confidence_score, datetime.now().isoformat()))
    else:
        # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (backward compatibility)
        cursor.execute("""
            INSERT INTO questions (question, answer, timestamp)
            VALUES (?, ?, ?)
        """, (question, answer, datetime.now().isoformat()))
        logging.warning("‚ö†Ô∏è Using legacy database format (missing citations/confidence columns)")
    
    conn.commit()
    conn.close()
    logging.info("‚úÖ Saved question to database.")

# ---------------------- Citation System ----------------------
class CitationSystem:
    def __init__(self):
        self.citation_counter = 0
        self.citations = {}
    
    def add_citation(self, doc_content, page_num, chunk_id, similarity_score):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏´‡∏°‡πà"""
        self.citation_counter += 1
        citation_key = f"ref_{self.citation_counter}"
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö
        if page_num is None or page_num == "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏´‡∏ô‡πâ‡∏≤":
            # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≤‡∏Å metadata ‡∏≠‡∏∑‡πà‡∏ô
            if hasattr(doc_content, 'metadata'):
                page_num = doc_content.metadata.get('page', None)
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ chunk_id ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ö‡∏≠‡∏Å
            if page_num is None:
                page_num = f"‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà {chunk_id.replace('chunk_', '')}"
        
        # ‡∏´‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£)
        lines = doc_content.split('\n') if isinstance(doc_content, str) else str(doc_content).split('\n')
        total_chars = len(str(doc_content))
        lines_info = []
        
        for i, line in enumerate(lines, 1):
            if line.strip():  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏õ‡∏•‡πà‡∏≤
                lines_info.append(f"‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î {i}")
        
        self.citations[citation_key] = {
            'page': page_num,
            'content': str(doc_content)[:200] + "..." if len(str(doc_content)) > 200 else str(doc_content),
            'full_content': str(doc_content),
            'chunk_id': chunk_id,
            'similarity_score': round(similarity_score, 3),
            'lines_range': f"{lines_info[0]}-{lines_info[-1]}" if lines_info else "‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1",
            'confidence': self.calculate_confidence(similarity_score, len(str(doc_content)))
        }
        
        return citation_key
    
    def calculate_confidence(self, similarity_score, content_length):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤"""
        base_confidence = similarity_score * 100
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
        if content_length > 500:
            length_bonus = 5
        elif content_length > 200:
            length_bonus = 3
        else:
            length_bonus = 0
            
        return min(95, base_confidence + length_bonus)
    
    def format_citation_inline(self, citation_key):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÅ‡∏ö‡∏ö inline"""
        if citation_key in self.citations:
            cite = self.citations[citation_key]
            return f"[‡∏´‡∏ô‡πâ‡∏≤ {cite['page']}, {cite['lines_range']}]"
        return "[?]"
    
    def format_citation_detailed(self, citation_key):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        if citation_key in self.citations:
            cite = self.citations[citation_key]
            return f"""
**‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á {citation_key}:**
- üìÑ **‡∏´‡∏ô‡πâ‡∏≤:** {cite['page']}
- üìç **‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:** {cite['lines_range']} 
- üìä **‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô:** {cite['confidence']:.1f}%
- üéØ **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô:** {cite['similarity_score']:.3f}
- üìù **‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:** "{cite['content']}"
"""
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"
    
    def get_all_citations_summary(self):
        """‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        if not self.citations:
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"
        
        summary = "## üìö ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á\n\n"
        for key, cite in self.citations.items():
            summary += f"**{key}:** ‡∏´‡∏ô‡πâ‡∏≤ {cite['page']}, {cite['lines_range']} (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: {cite['confidence']:.1f}%)\n"
        
        return summary
    
    def get_average_confidence(self):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô"""
        if not self.citations:
            return 0
        
        total_confidence = sum(cite['confidence'] for cite in self.citations.values())
        return total_confidence / len(self.citations)

# ---------------------- Embedding Setup ----------------------
embeddings = HuggingFaceEmbeddings(
    model_name="intfloat/multilingual-e5-large",
    model_kwargs={"device": "cuda" if torch.cuda.is_available() else "cpu"},
    encode_kwargs={"normalize_embeddings": True}
)
logging.info("üí° Embedding model loaded")

# ---------------------- Vector Store ----------------------
persist_directory = "chroma_db"
if os.path.exists(persist_directory):
    vectorstore = Chroma(persist_directory=persist_directory, embedding_function=embeddings)
    logging.info("üì¶ Loaded existing vector store from disk")
else:
    logging.info("üìÑ Processing document for the first time...")
    loader = PyMuPDFLoader("Loan_Features.pdf")
    docs = loader.load()

    if not docs or not docs[0].page_content.strip():
        logging.error("‚ùå ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        st.error("‚ùå ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        st.stop()

    splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
    chunks = splitter.split_documents(docs)
    logging.info(f"‚úÖ Document split into {len(chunks)} chunks")

    vectorstore = Chroma.from_documents(documents=chunks, embedding=embeddings, persist_directory=persist_directory)
    vectorstore.persist()
    logging.info("üìö Vector store created and persisted successfully")

# ---------------------- Enhanced Retrieval ----------------------
def retrieve_with_citations(query: str):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"""
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢
    docs_with_scores = vectorstore.similarity_search_with_score(query, k=5)
    
    citation_system = CitationSystem()
    context_parts = []
    
    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏µ (< 0.7 ‡∏Ñ‡∏∑‡∏≠‡∏î‡∏µ, > 1.0 ‡∏Ñ‡∏∑‡∏≠‡πÅ‡∏¢‡πà)
    filtered_docs = [(doc, score) for doc, score in docs_with_scores if score < 0.8]
    
    if not filtered_docs:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏≤‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 2 ‡∏≠‡∏±‡∏ô
        filtered_docs = docs_with_scores[:2]
    
    for i, (doc, score) in enumerate(filtered_docs[:3]):  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏Ñ‡πà 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤
        page = None
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å metadata
        if hasattr(doc, 'metadata') and doc.metadata:
            page = doc.metadata.get("page", None)
            # ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á page ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô 0-based ‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏ß‡∏Å 1
            if isinstance(page, int):
                page = page + 1 if page >= 0 else 1
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ pattern)
        if page is None:
            import re
            content = str(doc.page_content)
            # ‡∏´‡∏≤ pattern ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô "‡∏´‡∏ô‡πâ‡∏≤ 5" ‡∏´‡∏£‡∏∑‡∏≠ "Page 5"
            page_match = re.search(r'(?:‡∏´‡∏ô‡πâ‡∏≤|Page)\s*(\d+)', content, re.IGNORECASE)
            if page_match:
                page = int(page_match.group(1))
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÉ‡∏ä‡πâ‡∏•‡∏≥‡∏î‡∏±‡∏ö chunk ‡πÅ‡∏ó‡∏ô
        if page is None:
            page = f"‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà {i+1}"
        
        # Debug log
        logging.info(f"üìÑ ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà {i+1}: ‡∏´‡∏ô‡πâ‡∏≤ {page}, ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {score:.3f}")
        logging.info(f"Metadata: {doc.metadata if hasattr(doc, 'metadata') else 'No metadata'}")
        logging.info(f"‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {str(doc.page_content)[:200]}...\n")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
        citation_key = citation_system.add_citation(
            doc.page_content, 
            page, 
            f"chunk_{i+1}", 
            1 - score  # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô similarity score (‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏Å‡∏•‡πâ 1 ‡∏¢‡∏¥‡πà‡∏á‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢)
        )
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
        citation_inline = citation_system.format_citation_inline(citation_key)
        context_parts.append(f"{doc.page_content} {citation_inline}")
    
    context = "\n\n".join(context_parts)
    return context, citation_system

# ---------------------- Enhanced Answer Generation ----------------------
def generate_answer_with_citations(query: str, context: str, citation_system: CitationSystem) -> tuple:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á"""
    
    messages = [
        {
            "role": "system",
            "content": 
                "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡∏Å‡∏¢‡∏® "
                "‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô "
                "‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ "
                "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏Ñ‡∏£‡∏±‡∏ö' ‡πÄ‡∏™‡∏°‡∏≠"
        },
        {
            "role": "user",
            "content": (
                "Context ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:\n"
                f"{context}\n\n"
                "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á:\n"
                "Q: ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà‡∏ï‡πà‡∏≠‡∏õ‡∏µ?\n"
                "A: ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 360,000 ‡∏ö‡∏≤‡∏ó‡∏ï‡πà‡∏≠‡∏õ‡∏µ [‡∏´‡∏ô‡πâ‡∏≤ 5, ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î 12-15] ‡∏Ñ‡∏£‡∏±‡∏ö\n\n"
                f"Q: {query}\n"
                "A:"
            )
        }
    ]
    
    response = chat(model="llama3.2:latest", messages=messages)
    answer = response["message"]["content"]
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏£‡∏ß‡∏°
    avg_confidence = citation_system.get_average_confidence()
    
    return answer, avg_confidence

# ---------------------- Streamlit UI ----------------------
st.set_page_config(page_title="RAG Chatbot ‡∏Å‡∏¢‡∏® - Enhanced", page_icon="üìÑ", layout="wide")

# Header
st.title("üìÑ RAG Chatbot ‡∏Å‡∏¢‡∏® - Enhanced Citation System")
st.write("‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ `Loan_Features.pdf` ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î")

# Sidebar for settings
with st.sidebar:
    st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
    show_citations = st.checkbox("‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", value=True)
    show_confidence = st.checkbox("‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô", value=True)
    
    st.header("üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
    if st.button("‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"):
        conn = sqlite3.connect("questions.db")
        df = st.experimental_get_query_params() # placeholder for actual query
        st.write("‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏û‡∏±‡∏í‡∏ô‡∏≤")

# Initialize
init_db()

# Setup chat history
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Main chat area
col1, col2 = st.columns([2, 1]) if show_citations else st.columns([1])

with col1:
    # Show previous conversation
    for msg in st.session_state.chat_history:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á AI
            if msg["role"] == "assistant" and show_confidence and "confidence" in msg:
                confidence_color = "green" if msg["confidence"] > 80 else "orange" if msg["confidence"] > 60 else "red"
                st.markdown(f"<span style='color: {confidence_color}'>üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: {msg['confidence']:.1f}%</span>", unsafe_allow_html=True)

    # Chat input
    user_query = st.chat_input("‚ùì ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ú‡∏π‡πâ‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡∏Å‡∏¢‡∏®:")

    if user_query:
        st.session_state.chat_history.append({"role": "user", "content": user_query})

        with st.chat_message("user"):
            st.markdown(user_query)

        with st.spinner("üìö ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á..."):
            context, citation_system = retrieve_with_citations(user_query)

        with st.spinner("üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö..."):
            answer, confidence = generate_answer_with_citations(user_query, context, citation_system)

        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        assistant_msg = {
            "role": "assistant", 
            "content": answer,
            "confidence": confidence,
            "citation_system": citation_system
        }
        
        st.session_state.chat_history.append(assistant_msg)
        
        with st.chat_message("assistant"):
            st.markdown(answer)
            
            if show_confidence:
                confidence_color = "green" if confidence > 80 else "orange" if confidence > 60 else "red"
                st.markdown(f"<span style='color: {confidence_color}'>üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: {confidence:.1f}%</span>", unsafe_allow_html=True)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        citations_summary = citation_system.get_all_citations_summary()
        save_question_to_db(user_query, answer, citations_summary, confidence)

# Citation panel
if show_citations and len(st.session_state.chat_history) > 0:
    with col2:
        st.header("üìö ‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        if st.session_state.chat_history and st.session_state.chat_history[-1]["role"] == "assistant":
            last_msg = st.session_state.chat_history[-1]
            if "citation_system" in last_msg:
                citation_system = last_msg["citation_system"]
                
                st.markdown("### ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:")
                for key, cite in citation_system.citations.items():
                    with st.expander(f"üìÑ ‡∏´‡∏ô‡πâ‡∏≤ {cite['page']} (‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: {cite['confidence']:.1f}%)"):
                        st.markdown(f"**‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:** {cite['lines_range']}")
                        st.markdown(f"**‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô:** {cite['similarity_score']:.3f}")
                        st.markdown("**‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:**")
                        st.text_area("", cite['full_content'], height=150, key=f"content_{key}")

# Footer
st.markdown("---")
st.markdown("üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")